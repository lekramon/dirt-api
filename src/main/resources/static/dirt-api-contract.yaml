openapi: 3.0.3

info:
  title: DIRT
  description: |-
    API Contract - DIRT (Declaração de informações e registro de transações)
  contact:
    email: rampinheiro@uolinc.com
  version: 1.0.11

servers:
  - url: http://localhost:15050/
    description: DIRT API LOCAL

tags:
  - name: transaction
    description: Operações com as transações para a DIRT

paths:
  /transactions:
    post:
      tags:
        - transaction
      summary: Registrar uma transação
      description: Registrar uma transação para a DIRT
      operationId: registrarTransação
      requestBody:
        description: Registrar a transação
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionRequest'
        required: true
      responses:
        '201':
          description: Created, transação criada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionResponse'
        '400':
          description: Bad Request, dados inválidos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      tags:
        - transaction
      summary: Listar transações
      operationId: listarTransação
      parameters:
        - in: query
          name: page
          required: false
          schema:
            type: string
        - in: query
          name: captureMethodType
          required: false
          schema:
            type: string
        - in: query
          name: transactionType
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionListResponse'
        '400':
          description: Bad Request, CaptureMethodType ou TransactionType inválidos

  /transactions/{id}:
    put:
      tags:
        - transaction
      summary: Atualizar o status de uma transação
      operationId: atualizarStatusTransação
      parameters:
        - in: path
          name: id
          description: id da transação
          required: true
          schema:
            type: integer
      requestBody:
        description: Alterar status de uma transação para a DIRT
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateStatusRequest'
      responses:
        '200':
          description: OK, status da transação atualizada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionResponse'
        '400':
          description: Bad Request, status inválido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found, transação não existe
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '406':
          description: Not Acceptable, status passado não condiz com o fluxo
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags:
        - transaction
      summary: Apagar uma transação
      operationId: apagarTransação
      parameters:
        - in: path
          name: id
          description: id da transação
          schema:
            type: integer
      responses:
        '200':
          description: OK, transação apagada
        '404':
          description: Not Found, transação não existe
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    get:
      tags:
        - transaction
      summary: Listar uma transação pelo ID
      operationId: listarTransaçãoPeloId
      parameters:
        - in: path
          name: id
          description: id da transação
          schema:
            type: integer
      responses:
        '200':
          description: OK, transação listada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionResponse'
        '404':
          description: Not Found, transação não existe
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    TransactionRequest:
      required:
        - ip
        - amount
        - tax
        - accountId
        - description
        - captureMethod
        - transactionType
        - operation
        - otherAccount
      type: object
      properties:
        ip:
          type: string
          example: '192.158.1.38'
        amount:
          type: number
          format: double
          example: 99.99
        tax:
          type: number
          format: double
          example: 10.11
        accountId:
          type: integer
          format: int32
          example: 1
        description:
          type: string
          example: 'Pagto*Manga Zé'
        captureMethod:
          type: object
          properties:
            id:
              type: string
              example: '123'
            type:
              type: string
              example: 'WEB'
        transactionType:
          type: string
          example: 'PIX'
        operation:
          type: string
          example: 'CREDIT'
        otherAccount:
          type: object
          properties:
            number:
              type: string
              example: '1359764-2'
            agency:
              type: string
              example: '0001'
            bankCode:
              type: string
              example: '290'
      xml:
        name: TransactionRequest

    UpdateStatusRequest:
      type: object
      properties:
        status:
          type: string
          example: 'PENDING'
      xml:
        name: UpdateStatusRequest

    TransactionResponse:
      type: object
      properties:
        transactionId:
          type: integer
          format: int32
          example: 1
        transactionIp:
          type: string
          example: '192.158.1.38'
        status:
          type: string
          example: 'PENDING'
        transactionAmount:
          type: number
          format: double
          example: 99.99
        transactionTax:
          type: number
          format: double
          example: 10.11
        description:
          type: string
          example: 'Pagto*Manga Zé'
        transactionType:
          type: string
          example: 'PIX'
        account:
          type: object
          properties:
            accountId:
              type: integer
              format: int32
              example: 1
            document:
              type: string
              example: '59805714004'
            accountName:
              type: string
              example: 'Han Solo'
            accountNum:
              type: string
              example: '5840231-7'
            accountNumAgency:
              type: string
              example: '0001'
            accountNumBank:
              type: string
              example: '290'
            accountType:
              type: string
              example: 'F'
        captureMethod:
          type: object
          properties:
            id:
              type: string
              example: '123'
            type:
              type: string
              example: 'WEB'
        operation:
          type: string
          example: 'CREDIT'
        otherAccount:
          type: object
          properties:
            number:
              type: string
              example: '1359764-2'
            agency:
              type: string
              example: '0001'
            bankcode:
              type: string
              example: '290'
      xml:
        name: TransactionResponse

    TransactionListResponse:
      type: object
      properties:
        size:
          type: integer
          format: int32
          example: 10
        total_size:
          type: integer
          format: int32
          example: 100
        page:
          type: integer
          format: int32
          example: 0
          default: 0
        total_pages:
          type: integer
          format: int32
          example: 100
        content:
          type: array
          items:
            $ref: '#/components/schemas/TransactionResponse'
      xml:
        name: TransactionListResponse

    ErrorResponse:
      type: object
      properties:
        errorCode:
          type: integer
          format: int32
          example: 400
        message:
          type: string
          example: "Error Message"
      xml:
        name: ErrorResponse